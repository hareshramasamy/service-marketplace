generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  role            Role             @default(CLIENT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bookings        Booking[]        @relation("ClientBookings")
  providerProfile ProviderProfile?
}

model ProviderProfile {
  id        String              @id @default(cuid())
  userId    String              @unique
  headline  String?
  bio       String?
  ratingAvg Float               @default(0)
  ratingCnt Int                 @default(0)
  blocks    AvailabilityBlock[]
  bookings  Booking[]           @relation("ProviderBookings")
  user      User                @relation(fields: [userId], references: [id])
  services  Service[]
}

model Service {
  id          String          @id @default(cuid())
  providerId  String
  title       String
  description String
  durationMin Int
  priceCents  Int
  currency    String          @default("usd")
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  bookings    Booking[]
  provider    ProviderProfile @relation(fields: [providerId], references: [id])
}

model AvailabilityBlock {
  id         String          @id @default(cuid())
  providerId String
  weekday    Int
  startTime  String
  endTime    String
  timezone   String
  provider   ProviderProfile @relation(fields: [providerId], references: [id])
}

model Booking {
  id         String          @id @default(cuid())
  serviceId  String
  clientId   String
  providerId String
  startsAt   DateTime
  endsAt     DateTime
  status     BookingStatus   @default(REQUESTED)
  priceCents Int
  currency   String          @default("usd")
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  client     User            @relation("ClientBookings", fields: [clientId], references: [id])
  provider   ProviderProfile @relation("ProviderBookings", fields: [providerId], references: [id])
  service    Service         @relation(fields: [serviceId], references: [id])
  payment    Payment?
}

model Payment {
  id                  String   @id @default(cuid())
  bookingId           String   @unique
  stripePaymentIntent String?
  stripeCheckoutId    String?
  amountCents         Int
  status              String   @default("pending")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  booking             Booking  @relation(fields: [bookingId], references: [id])
}

enum Role {
  ADMIN
  PROVIDER
  CLIENT
}

enum BookingStatus {
  REQUESTED
  CONFIRMED
  PAID
  COMPLETED
  CANCELLED
  NO_SHOW
}
